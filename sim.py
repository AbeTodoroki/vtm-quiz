import numpy as np
from collections import Counter
import matplotlib.pyplot as plt

clanNames = ['Banu Haqim', 'Brujah', 'Gangrel', 'Hecata', 'Lasombra', 'Malkavian', 'Ministry', 'Nosferatu',
             'Ravnos', 'Salubri', 'Toreador', 'Tremere', 'Tzimisce', 'Ventrue']

weights = [
[[1, 1], [1, 2], [1, 1], [2, 4], [1, 1], [2, 1], [1, 1], [1, 1], [1, 1], [1, 1], [4, 1], [1, 4], [3, 2], [1, 1]],
[[1, 2], [2, 1], [1, 2], [2, 3], [2, 2], [1, 3], [2, 2], [1, 4], [2, 1], [1, 3], [4, 1], [1, 2], [4, 2], [3, 2]],
[[3, 2], [3, 3], [1, 4], [3, 2], [1, 2], [3, 2], [2, 3], [2, 3], [1, 4], [2, 3], [2, 2], [4, 1], [2, 1], [2, 2]],
[[3, 1], [1, 3], [1, 3], [1, 2], [2, 1], [1, 2], [2, 3], [4, 1], [1, 3], [3, 1], [2, 3], [3, 1], [1, 3], [3, 2]],
[[1, 3], [2, 1], [2, 2], [1, 3], [1, 3], [3, 2], [2, 2], [2, 2], [2, 3], [4, 1], [3, 1], [1, 2], [1, 4], [1, 3]],
[[1, 1], [3, 1], [2, 2], [3, 1], [3, 1], [1, 1], [1, 2], [1, 2], [2, 3], [1, 1], [2, 1], [2, 1], [3, 1], [3, 1]],
[[2, 1], [3, 1], [2, 2], [2, 1], [4, 1], [2, 3], [3, 2], [1, 2], [3, 2], [1, 2], [3, 2], [2, 1], [3, 1], [4, 1]],
[[1, 3], [2, 1], [2, 1], [3, 2], [1, 2], [3, 1], [3, 1], [1, 3], [3, 1], [2, 1], [3, 2], [1, 3], [3, 1], [1, 3]],
[[2, 1], [3, 1], [2, 1], [1, 1], [3, 1], [2, 3], [1, 1], [2, 2], [1, 2], [2, 1], [1, 1], [1, 1], [2, 1], [3, 1]],
[[2, 1], [1, 1], [3, 2], [1, 2], [3, 1], [1, 2], [3, 2], [2, 1], [1, 3], [3, 1], [1, 3], [2, 2], [2, 2], [3, 1]],
[[2, 1], [1, 1], [2, 1], [1, 3], [2, 1], [1, 4], [1, 1], [3, 1], [1, 2], [3, 1], [1, 3], [2, 2], [2, 2], [3, 1]],
[[1, 4], [2, 2], [1, 2], [3, 1], [3, 1], [1, 1], [2, 1], [2, 1], [2, 1], [1, 4], [1, 1], [3, 1], [3, 1], [4, 1]],
[[3, 2], [1, 3], [2, 3], [1, 2], [1, 3], [1, 1], [1, 1], [1, 2], [1, 1], [1, 1], [3, 1], [1, 1], [1, 2], [1, 1]],
[[1, 2], [2, 1], [1, 3], [1, 2], [2, 1], [2, 3], [3, 1], [1, 3], [3, 1], [1, 3], [4, 1], [2, 3], [3, 1], [3, 1]],
[[1, 4], [3, 1], [3, 1], [1, 3], [2, 3], [2, 1], [3, 1], [1, 2], [4, 1], [2, 3], [3, 2], [1, 4], [2, 1], [1, 3]],
[[3, 3], [3, 2], [3, 3], [2, 2], [1, 2], [1, 3], [2, 1], [3, 1], [1, 2], [3, 2], [1, 2], [1, 2], [2, 1], [1, 1]],
[[1, 2], [3, 1], [3, 1], [1, 3], [1, 2], [2, 2], [1, 2], [1, 3], [3, 1], [2, 3], [3, 1], [1, 3], [2, 2], [1, 2]],
[[1, 2], [3, 1], [2, 1], [1, 1], [1, 3], [3, 1], [1, 2], [1, 3], [2, 1], [1, 2], [2, 2], [1, 2], [1, 2], [1, 3]],
[[3, 1], [1, 3], [1, 3], [3, 1], [2, 1], [3, 1], [1, 2], [2, 2], [1, 3], [1, 2], [2, 1], [3, 1], [1, 1], [3, 1]],
[[1, 1], [1, 2], [1, 4], [1, 1], [2, 1], [1, 1], [1, 4], [1, 2], [1, 3], [1, 1], [3, 1], [2, 1], [2, 1], [3, 1]],
[[1, 1], [2, 1], [1, 1], [1, 2], [4, 1], [1, 3], [2, 4], [2, 3], [1, 2], [1, 1], [2, 3], [1, 2], [3, 2], [4, 1]],
[[3, 3], [1, 3], [1, 1], [1, 2], [2, 2], [2, 2], [1, 3], [1, 1], [1, 1], [1, 3], [1, 1], [2, 1], [1, 1], [2, 3]],
[[2, 3], [2, 3], [1, 3], [4, 1], [1, 1], [2, 1], [1, 1], [1, 1], [1, 1], [3, 1], [2, 1], [3, 1], [2, 1], [1, 1]],
[[1, 3], [4, 1], [3, 1], [2, 1], [1, 2], [2, 2], [1, 3], [1, 3], [3, 1], [1, 3], [2, 2], [1, 3], [3, 1], [1, 3]],
[[2, 2], [2, 1], [1, 1], [4, 1], [2, 2], [1, 1], [2, 1], [2, 2], [2, 1], [2, 1], [1, 1], [2, 1], [4, 1], [1, 2]],
[[3, 1], [1, 4], [1, 2], [1, 2], [2, 2], [1, 3], [1, 3], [2, 1], [1, 3], [1, 2], [2, 2], [3, 1], [1, 2], [2, 1]],
[[3, 2], [2, 1], [1, 2], [1, 2], [1, 4], [1, 2], [1, 2], [1, 3], [1, 3], [3, 2], [1, 2], [1, 2], [1, 2], [1, 1]],
[[2, 1], [1, 4], [1, 3], [1, 2], [1, 3], [1, 3], [1, 1], [1, 1], [1, 2], [4, 1], [1, 1], [2, 2], [1, 2], [2, 1]],
[[2, 2], [1, 2], [1, 3], [3, 1], [3, 2], [2, 3], [3, 1], [3, 1], [1, 3], [3, 1], [2, 2], [3, 1], [2, 3], [3, 2]],
[[1, 2], [2, 1], [2, 3], [1, 2], [2, 3], [3, 1], [2, 1], [1, 2], [3, 1], [1, 3], [2, 1], [1, 2], [1, 2], [1, 2]],
[[3, 1], [1, 2], [2, 1], [3, 2], [3, 1], [1, 1], [4, 1], [2, 1], [2, 1], [3, 1], [1, 2], [2, 3], [2, 2], [1, 2]],
[[4, 1], [2, 1], [2, 1], [1, 2], [1, 2], [2, 1], [1, 3], [2, 3], [1, 4], [3, 2], [1, 3], [1, 3], [1, 3], [1, 3]],
[[2, 1], [3, 1], [3, 2], [2, 2], [2, 1], [3, 1], [1, 3], [3, 1], [2, 3], [3, 1], [1, 2], [3, 1], [2, 1], [2, 1]],
[[1, 2], [2, 1], [2, 1], [2, 1], [3, 2], [4, 1], [3, 2], [1, 3], [3, 1], [2, 1], [3, 2], [2, 3], [3, 1], [2, 3]],
[[2, 1], [3, 2], [2, 1], [1, 3], [1, 2], [1, 4], [2, 3], [1, 4], [1, 2], [1, 1], [1, 2], [1, 3], [1, 2], [1, 2]],
[[1, 2], [2, 1], [1, 4], [3, 2], [2, 1], [1, 2], [3, 1], [2, 3], [3, 2], [1, 3], [2, 1], [2, 1], [1, 3], [2, 1]]
]


weights = np.array(weights)


def compute_normalized_scores(values):
    left = 100 - values
    right = values
    weights_difference = weights[:, :, 1] * right[:, None] - weights[:, :, 0] * left[:, None]
    weights_sum = np.sum(weights, axis=2)

    diffs = np.abs(weights_difference / weights_sum)
    scores = np.sum(diffs, axis=0)
    total = np.sum(scores)

    return scores / total if total > 0 else scores


N = 1000000
results = []
values_array = np.random.uniform(0, 100, size=(N, len(weights)))

for values in values_array:
    scores = compute_normalized_scores(values)
    results.append(clanNames[np.argmax(scores)])


counter = Counter(results)
percentages = {clan: (count / N) * 100 for clan, count in counter.items()}
percentages_sorted = dict(sorted(percentages.items(), key=lambda x: x[1], reverse=True))

for clan, pct in percentages_sorted.items():
    print(f"{clan}: {pct:.1f}%")

plt.figure(figsize=(10, 6))
plt.bar(percentages_sorted.keys(), percentages_sorted.values())
plt.xticks(rotation=45, ha='right')
plt.ylabel('Frequency (%)')
plt.title(f'Clans Distribution in {N} Random Tests')
plt.tight_layout()
plt.savefig("sim.png", dpi=300)
